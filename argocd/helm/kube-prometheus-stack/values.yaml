kube-prometheus-stack:
  ## Install Prometheus Operator CRDs
  ##
  crds:
    enabled: true


  ## Create default rules for monitoring the cluster
  ##
  defaultRules:
    create: true
    rules:
      alertmanager: false
      etcd: false
      configReloaders: true
      general: true
      k8s: true
      kubeApiserverAvailability: true
      kubeApiserverBurnrate: true
      kubeApiserverHistogram: true
      kubeApiserverSlos: true
      kubeControllerManager: true
      kubelet: true
      kubeProxy: true
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeSchedulerAlerting: true
      kubeSchedulerRecording: true
      kubeStateMetrics: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true
      windows: false
    labels:
      grafana_alert: "1"

  ## Configuration for alertmanager
  ## ref: https://prometheus.io/docs/alerting/alertmanager/
  ##
  alertmanager:
    enabled: false

  ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  ##
  grafana:
    enabled: true
    adminPassword: admin

    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
      alerts:
        enabled: true
        searchNamespace: ALL
      datasources:
        enabled: true
        defaultDatasourceEnabled: true
        isDefaultDatasource: false

    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Mimir
            type: prometheus
            uid: lgtm-mimir
            url: http://mimir-gateway.mimir.svc.cluster.local:8080/prometheus
            editable: true
            isDefault: true
            orgId: 1
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "lgtm-kind"
          - name: Loki
            type: loki
            uid: lgtm-loki
            url: http://loki-gateway.loki.svc.cluster.local
            editable: true
            orgId: 1
            jsonData:
              httpHeaderName1: "X-Scope-OrgId"
            secureJsonData:
              httpHeaderValue1: "lgtm-kind"
          - name: Tempo
            type: tempo
            url: http://tempo.tempo.svc.cluster.local:4318
            editable: true
            orgId: 1
            uid: lgtm-tempo
            jsonData:
              httpHeaderName1: X-Scope-OrgId
              tracesToLogsV2:
                datasourceUid: "lgtm-loki"
                spanStartTimeShift: 1h
                spanEndTimeShift: -1h
                tags:
                  - job
                  - instance
                  - pod
                  - namespace
                filterByTraceID: 'False'
                filterBySpanID: 'False'
                customQuery: 'True'
                query: method='${__span.tags.method}'
              tracesToMetrics:
                datasourceUid: "lgtm-mimir"
                spanStartTimeShift: 1h
                spanEndTimeShift: -1h
                tags:
                  - key: service.name
                    value: service
                  - key: job
                queries:
                  - name: Sample query
                    query: sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))
              serviceMap:
                datasourceUid: ets-mimir
              nodeGraph:
                enabled: 'True'
              search:
                hide: 'False'
              lokiSearch:
                datasourceUid: "lgtm-loki"
              traceQuery:
                timeShiftEnabled: 'True'
                spanStartTimeShift: 1h
                spanEndTimeShift: -1h
              spanBar:
                type: Tag
                tag: http.path
            secureJsonData:
              httpHeaderValue1: "lgtm-kind"

  ## Deploy a Prometheus instance
  ##
  prometheus:
    enabled: false
#
#    prometheusSpec:
#      ## The remote_write spec configuration for Prometheus.
#      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#remotewritespec
#      remoteWrite:
#        - url: http://mimir-gateway.mimir.svc.cluster.local:8080/api/v1/push
#          headers:
#            "X-Scope-OrgID": "lgtm-kind"

  kubeProxy:
    enabled: false

